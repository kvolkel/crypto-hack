

# This file was *autogenerated* from the file pad_encrypt.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103 = Integer(95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103); _sage_const_3 = Integer(3); _sage_const_63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828 = Integer(63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828); _sage_const_100 = Integer(100); _sage_const_256 = Integer(256)#"""""
#!/usr/bin/env sage

from sage.all import *

def euclid_method(a,b):
    if b==_sage_const_0 :
        return a
    else:
        return euclid_method(b,a%b)

n = _sage_const_95341235345618011251857577682324351171197688101180707030749869409235726634345899397258784261937590128088284421816891826202978052640992678267974129629670862991769812330793126662251062120518795878693122854189330426777286315442926939843468730196970939951374889986320771714519309125434348512571864406646232154103 
e = _sage_const_3 
c = _sage_const_63476139027102349822147098087901756023488558030079225358836870725611623045683759473454129221778690683914555720975250395929721681009556415292257804239149809875424000027362678341633901036035522299395660255954384685936351041718040558055860508481512479599089561391846007771856837130233678763953257086620228436828 

for i in range(_sage_const_0 ,_sage_const_100 ):
    r = pow(_sage_const_256 ,int(-e*(i)),n)
    C1=(r*c)%n
    try:
        print(C1.nth_root(_sage_const_3 ))
    except:
        continue
        

    

    
#"""""

"""""
from Crypto.PublicKey import RSA
from Crypto.Util.number import bytes_to_long

FLAG = b"crypto{???????????????????????????????????}"


def pad100(msg):
    print(100-len(msg))
    return msg + b'\x00' * (100 - len(msg))


key = RSA.generate(1024, e=3)
n, e = key.n, key.e

m = bytes_to_long(pad100(FLAG))
c = pow(m, e, n)

print(f"n = {n}")
print(f"e = {e}")
print(f"c = {c}")
"""

